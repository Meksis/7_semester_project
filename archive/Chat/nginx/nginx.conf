events {}

http {
    # Объявление сервера для HTTPS
    server {
        listen 443 ssl;
        server_name localhost;
        # server_name ${FRONTEND_HOST};

        # SSL сертификаты
        ssl_certificate /etc/ssl/cert.pem;
        ssl_certificate_key /etc/ssl/key.pem;

        # Проброс запросов с https на http фронта

        location / {
            # proxy_pass http://localhost:3000;  # Прокси на сервер NodeJS (https)
            proxy_pass http://host.docker.internal:3000;  # Прокси на сервер NodeJS (https)
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Заголовки для разрешения CORS
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
                add_header Access-Control-Allow-Headers 'Content-Type, Authorization';
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }

            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
            add_header Access-Control-Allow-Headers 'Content-Type, Authorization';
        }
        
        # Проброс запросов с https на http бэка
        location /api/back/ {
            # proxy_pass http://localhost:3000;  # Прокси на сервер NodeJS (https)
            proxy_pass http://host.docker.internal:5000;  # Прокси на сервер NodeJS (https)
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Заголовки для разрешения CORS
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
                add_header Access-Control-Allow-Headers 'Content-Type, Authorization';
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }

            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
            add_header Access-Control-Allow-Headers 'Content-Type, Authorization';
        }

        # Прокси на /api/chat запросы на сервер Ollama (HTTP)
        location /api/chat {
            # rewrite ^/api/chat(/.*)$ $1 break;
            proxy_pass http://ollama:11434/api/chat;  # Прокси на контейнер Ollama (http)
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # Заголовки для разрешения CORS
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
                add_header Access-Control-Allow-Headers 'Content-Type, Authorization';
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }

            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
            add_header Access-Control-Allow-Headers 'Content-Type, Authorization';
        }

    }

    # Сервер для редиректа с HTTP на HTTPS ( для безопасности )
    server {
        listen 80;
        server_name localhost;

        return 301 https://$host$request_uri;  # Редирект с HTTP на HTTPS
    }
}
